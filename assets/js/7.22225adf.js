(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{419:function(t,v,_){t.exports=_.p+"assets/img/00.8bdca3ce.jpg"},420:function(t,v,_){t.exports=_.p+"assets/img/01.ac4f8932.jpg"},421:function(t,v,_){t.exports=_.p+"assets/img/02.31d083e8.jpg"},422:function(t,v,_){t.exports=_.p+"assets/img/03.41e29db0.jpg"},487:function(t,v,_){"use strict";_.r(v);var s=_(62),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"词法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[t._v("#")]),t._v(" 词法分析")]),t._v(" "),s("p",[t._v("词法分析的任务是：输入的是字符串，输出的是"),s("code",[t._v("Token")]),t._v("串。所以，词法分析器在英文中一般叫做"),s("code",[t._v("Tokenizer")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:_(419),alt:"词法分析"}})]),t._v(" "),s("h2",{attrs:{id:"词法分析的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法分析的原理"}},[t._v("#")]),t._v(" 词法分析的原理")]),t._v(" "),s("p",[t._v("业界常引入"),s("strong",[t._v("有限自动机理论")]),t._v("，实现词法分析程序。")]),t._v(" "),s("p",[s("img",{attrs:{src:_(420),alt:"有限自动机"}})]),t._v(" "),s("p",[t._v("单线圆圈表示初始节点，双线圆圈表示终态节点。终态节点就是一个合格的"),s("code",[t._v("Token")]),t._v("，当终态节点遇到空白字符的时候，就可以记下一个"),s("code",[t._v("Token")]),t._v("，并回到初始态，开始识别其他"),s("code",[t._v("Token")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("词法分析的过程，其实就是对一个字符串进行模式匹配的过程。")])]),t._v(" "),s("p",[t._v("相较于学术中的词法分析，在实际开发中碰到需要字符串模式匹配时，我们更熟悉正则表达式。如"),s("code",[t._v("[0-9]+abc")]),t._v("，匹配以数字开头，以字母"),s("code",[t._v("abc")]),t._v("结尾的字符串。")]),t._v(" "),s("p",[t._v("使用正则表达式来描述词法规则的描述方法，称为正则文法。")]),t._v(" "),s("p",[t._v("假定存在如下正则文法：")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("Int "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    // int 关键字\nId  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A-Za-z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A-Za-z0-9"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   // 以字母开头，后面可以是字符或数字\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("因"),s("code",[t._v("int")]),t._v("关键字和正常的"),s("code",[t._v("id")]),t._v("标识符存在重叠，所以，词法规则里面要有优先级。最终设计出的有限自动机如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:_(421),alt:"有限自动机"}})]),t._v(" "),s("p",[t._v("手动设计有限自动机太复杂了，有没有一种方法，可以只写出词法规则，就自动生成相对应的有限自动机呢？")]),t._v(" "),s("h2",{attrs:{id:"从正则表达式生成有限自动机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从正则表达式生成有限自动机"}},[t._v("#")]),t._v(" 从正则表达式生成有限自动机")]),t._v(" "),s("p",[t._v("为了能自动生成有限自动机：业界常把一个正则表达式翻译成"),s("code",[t._v("NFA")]),t._v("，然后把"),s("code",[t._v("NFA")]),t._v("转换成"),s("code",[t._v("DFA")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("DFA")]),t._v("，确定的有限自动机。该状态机在任何一个状态，基于输入的字符，都能做一个确定的状态转换。")]),t._v(" "),s("p",[s("code",[t._v("NFA")]),t._v("，不确定的有限自动机。该状态机中存在某些状态，针对某些输入，不能做一个确定的转换。")]),t._v(" "),s("p",[t._v("针对正则表达式"),s("code",[t._v("a[a-zA-Z0-9]*bc")]),t._v("，可以构建如下自动机：")]),t._v(" "),s("p",[s("img",{attrs:{src:_(422),alt:"NFA"}})]),t._v(" "),s("p",[t._v("状态"),s("code",[t._v("1")]),t._v("的节点输入"),s("code",[t._v("b")]),t._v("时，这个状态是有两条路径可以选择的：一条是迁移到状态"),s("code",[t._v("2")]),t._v("，另一条是仍然保持在状态"),s("code",[t._v("1")]),t._v("。所以，这个有限自动机是一个"),s("code",[t._v("NFA")]),t._v("。")]),t._v(" "),s("p",[t._v("基于"),s("code",[t._v("NFA")]),t._v("，你仍然可以实现一个词法分析器：当某个状态存在一条以上转换路径时，需要先尝试其中的一条；如果匹配不上，再退回来，尝试其他路径；这个过程叫做"),s("strong",[t._v("回溯（Backtracking）")]),t._v("。")]),t._v(" "),s("p",[t._v("因为存在多条可能的路径，所以需要试探和回溯，在比较极端的情况下，回溯次数会非常多，性能会变得非常差。通常使用"),s("strong",[t._v("子集构造法")]),t._v("将"),s("code",[t._v("NFA")]),t._v("转换成"),s("code",[t._v("DFA")]),t._v("，再实现词法分析器。")])])}),[],!1,null,null,null);v.default=a.exports}}]);