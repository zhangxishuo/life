(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{520:function(v,a,_){"use strict";_.r(a);var t=_(62),s=Object(t.a)({},(function(){var v=this,a=v.$createElement,_=v._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"jvm-如何执行方法调用-一"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm-如何执行方法调用-一"}},[v._v("#")]),v._v(" JVM 如何执行方法调用(一)")]),v._v(" "),_("p",[v._v("有如下两个"),_("code",[v._v("Java")]),v._v("方法：")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("void")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("invoke")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v(" args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("void")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("invoke")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("String")]),v._v(" s"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),v._v(" obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v(" args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("p",[v._v("当执行"),_("code",[v._v("invoke(null, 1)")]),v._v("时，这个"),_("code",[v._v("invoke")]),v._v("调用有二义性。然而，"),_("code",[v._v("Java")]),v._v("编译器直接将方法调用识别为调用第二个方法，这究竟是为什么呢？")]),v._v(" "),_("h2",{attrs:{id:"重载与重写"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重载与重写"}},[v._v("#")]),v._v(" 重载与重写")]),v._v(" "),_("p",[v._v("如果在同一个类中定义名字相同的方法，那么它们的参数列表必须不同。这称为方法重载。除了同一个类中的方法，重载也可以作用于这个类所继承而来的方法。")]),v._v(" "),_("p",[v._v("重载的方法在编译过程中即可完成识别。具体到每一个方法调用，"),_("code",[v._v("Java")]),v._v("编译器会根据所传入参数的声明类型来选取重载方法。")]),v._v(" "),_("ol",[_("li",[v._v("在不考虑对基本类型自动装拆箱，以及可变长参数的情况下选取重载方法；")]),v._v(" "),_("li",[v._v("如果在第"),_("code",[v._v("1")]),v._v("个阶段中没有找到适配的方法，那么在允许自动装拆箱，但不允许可变长参数的情况下选取重载方法；")]),v._v(" "),_("li",[v._v("如果在第"),_("code",[v._v("2")]),v._v("个阶段中没有找到适配的方法，那么在允许自动装拆箱以及可变长参数的情况下选取重载方法。")])]),v._v(" "),_("p",[v._v("如果"),_("code",[v._v("Java")]),v._v("编译器在同一个阶段中找到了多个适配的方法，那么它会在其中选择一个最为贴切的，而决定贴切程度的一个关键就是形式参数类型的继承关系。")]),v._v(" "),_("p",[v._v("在开头的例子中，当传入"),_("code",[v._v("null")]),v._v("时，它既可以匹配第一个方法中声明为"),_("code",[v._v("Object")]),v._v("的形式参数，也可以匹配第二个方法中声明为"),_("code",[v._v("String")]),v._v("的形式参数。由于"),_("code",[v._v("String")]),v._v("是"),_("code",[v._v("Object")]),v._v("的子类，因此"),_("code",[v._v("Java")]),v._v("编译器会认为第二个方法更为贴切。")]),v._v(" "),_("h2",{attrs:{id:"静态绑定和动态绑定"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态绑定和动态绑定"}},[v._v("#")]),v._v(" 静态绑定和动态绑定")]),v._v(" "),_("p",[_("code",[v._v("Java")]),v._v("虚拟机识别方法的关键在于类名、方法名以及方法描述符"),_("code",[v._v("method descriptor")]),v._v("。方法描述符，是由方法的参数类型以及返回类型所构成。在同一个类中，如果同时出现多个名字相同且描述符也相同的方法，那么"),_("code",[v._v("Java")]),v._v("虚拟机会在类的验证阶段报错。")]),v._v(" "),_("p",[_("code",[v._v("Java")]),v._v("虚拟机与"),_("code",[v._v("Java")]),v._v("语言不同，它并不限制名字与参数类型相同，但返回类型不同的方法出现在同一个类中，对于调用这些方法的字节码来说，由于字节码所附带的方法描述符包含了返回类型，因此"),_("code",[v._v("Java")]),v._v("虚拟机能够准确地识别目标方法。")]),v._v(" "),_("p",[v._v("因为某个类中的重载方法可能被它的子类所重写，因此"),_("code",[v._v("Java")]),v._v("编译器会将所有对非私有实例方法的调用编译为需要动态绑定的类型。")]),v._v(" "),_("p",[_("code",[v._v("Java")]),v._v("虚拟机中的静态绑定指的是在解析时便能够直接识别目标方法的情况，而动态绑定则指的是需要在运行过程中根据调用者的动态类型来识别目标方法的情况。")]),v._v(" "),_("p",[_("code",[v._v("Java")]),v._v("字节码中与调用相关的指令共有五种：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("invokestatic")]),v._v("：用于调用静态方法。")]),v._v(" "),_("li",[_("code",[v._v("invokespecial")]),v._v("：用于调用私有实例方法、构造器，以及使用"),_("code",[v._v("super")]),v._v("关键字调用父类的实例方法或构造器，和所实现接口的默认方法。")]),v._v(" "),_("li",[_("code",[v._v("invokevirtual")]),v._v("：用于调用非私有实例方法。")]),v._v(" "),_("li",[_("code",[v._v("invokeinterface")]),v._v("：用于调用接口方法。")]),v._v(" "),_("li",[_("code",[v._v("invokedynamic")]),v._v("：用于调用动态方法。")])]),v._v(" "),_("h2",{attrs:{id:"调用指令的符号引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调用指令的符号引用"}},[v._v("#")]),v._v(" 调用指令的符号引用")]),v._v(" "),_("p",[v._v("在编译过程中，我们并不知道目标方法的具体内存地址。"),_("code",[v._v("Java")]),v._v("编译器会暂时用符号引用来表示该目标方法。符号引用存储在"),_("code",[v._v("class")]),v._v("文件的常量池之中。根据目标方法是否为接口方法，这些引用可分为接口符号引用和非接口符号引用。")]),v._v(" "),_("p",[v._v("在执行使用了符号引用的字节码前，"),_("code",[v._v("Java")]),v._v("虚拟机需要解析这些符号引用，并替换为实际引用。")]),v._v(" "),_("p",[v._v("对于非接口符号引用，假定该符号引用所指向的类为"),_("code",[v._v("C")]),v._v("，则"),_("code",[v._v("Java")]),v._v("虚拟机会按照如下步骤进行查找：")]),v._v(" "),_("ol",[_("li",[v._v("在"),_("code",[v._v("C")]),v._v("中查找符合名字及描述符的方法。")]),v._v(" "),_("li",[v._v("如果没有找到，在"),_("code",[v._v("C")]),v._v("的父类中继续搜索，直至"),_("code",[v._v("Object")]),v._v("类。")]),v._v(" "),_("li",[v._v("如果没有找到，在"),_("code",[v._v("C")]),v._v("所直接实现或间接实现的接口中搜索，这一步搜索得到的目标方法必须是非私有、非静态的。并且，如果目标方法在间接实现的接口中，则需满足"),_("code",[v._v("C")]),v._v("与该接口之间没有其他符合条件的目标方法。如果有多个符合条件的目标方法，则任意返回其中一个。")])]),v._v(" "),_("p",[v._v("从这个解析算法可以看出，静态方法也可以通过子类来调用。此外，子类的静态方法会隐藏（注意与重写区分）父类中的同名、同描述符的静态方法。")]),v._v(" "),_("p",[v._v("对于接口符号引用，假定该符号引用所指向的接口为"),_("code",[v._v("I")]),v._v("，则"),_("code",[v._v("Java")]),v._v("虚拟机会按照如下步骤进行查找：")]),v._v(" "),_("ol",[_("li",[v._v("在"),_("code",[v._v("I")]),v._v("中查找符合名字及描述符的方法。")]),v._v(" "),_("li",[v._v("如果没有找到，在"),_("code",[v._v("Object")]),v._v("类中的公有实例方法中搜索。")]),v._v(" "),_("li",[v._v("如果没有找到，则在"),_("code",[v._v("I")]),v._v("的超接口中搜索。这一步的搜索结果的要求与非接口符号引用步骤"),_("code",[v._v("3")]),v._v("的要求一致。")])]),v._v(" "),_("p",[v._v("经过上述的解析步骤之后，符号引用会被解析成实际引用。对于可以静态绑定的方法调用而言，实际引用是一个指向方法的指针。对于需要动态绑定的方法调用而言，实际引用则是一个方法表的索引。")])])}),[],!1,null,null,null);a.default=s.exports}}]);