(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{449:function(v,_,a){v.exports=a.p+"assets/img/00.ab5c3523.png"},450:function(v,_,a){v.exports=a.p+"assets/img/01.5ee35109.png"},484:function(v,_,a){"use strict";a.r(_);var e=a(62),o=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"深入拆解-java-虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入拆解-java-虚拟机"}},[v._v("#")]),v._v(" 深入拆解 Java 虚拟机")]),v._v(" "),e("p",[e("code",[v._v("Java")]),v._v("代码的运行离不开"),e("code",[v._v("JRE")]),v._v("，也就是"),e("code",[v._v("Java")]),v._v("运行时环境。")]),v._v(" "),e("p",[v._v("然而，运行"),e("code",[v._v("C++")]),v._v("代码则无需额外的运行环境。我们往往把这些代码直接编译成"),e("code",[v._v("CPU")]),v._v("所能理解的代码格式，也就是机器码。")]),v._v(" "),e("p",[v._v("既然"),e("code",[v._v("C++")]),v._v("的运行方式如此成熟，为什么"),e("code",[v._v("Java")]),v._v("要在虚拟机中运行呢？"),e("code",[v._v("Java")]),v._v("虚拟机具体又是怎样运行"),e("code",[v._v("Java")]),v._v("代码的呢？它的运行效率又如何呢？")]),v._v(" "),e("h2",{attrs:{id:"为什么-java-要在虚拟机里运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-java-要在虚拟机里运行"}},[v._v("#")]),v._v(" 为什么 Java 要在虚拟机里运行？")]),v._v(" "),e("p",[e("code",[v._v("Java")]),v._v("虚拟机屏蔽了硬件层面的底层实现，对外提供统一的"),e("code",[v._v("API")]),v._v("，一个程序被转换成"),e("code",[v._v("Java")]),v._v("字节码，那么它可以在不同平台上的虚拟机实现里运行。“一次编写，到处运行”。")]),v._v(" "),e("p",[v._v("虚拟机的另外一个好处是它带来了一个托管环境"),e("code",[v._v("Managed Runtime")]),v._v("。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。其中最广为人知的当属自动内存管理与垃圾回收。")]),v._v(" "),e("p",[v._v("除此之外，托管环境还提供了诸如数组越界、动态类型、安全权限等等的动态检测，使我们免于书写这些无关业务逻辑的代码。")]),v._v(" "),e("h2",{attrs:{id:"java-虚拟机是怎样运行字节码的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机是怎样运行字节码的"}},[v._v("#")]),v._v(" Java 虚拟机是怎样运行字节码的？")]),v._v(" "),e("p",[v._v("从虚拟机视角来看，执行"),e("code",[v._v("Java")]),v._v("代码首先需要将它编译而成的"),e("code",[v._v("class")]),v._v("文件加载到"),e("code",[v._v("Java")]),v._v("虚拟机中。加载后的"),e("code",[v._v("Java")]),v._v("类会被存放于方法区"),e("code",[v._v("Method Area")]),v._v("中。实际运行时，虚拟机会执行方法区内的代码。")]),v._v(" "),e("p",[e("code",[v._v("Java")]),v._v("虚拟机将栈细分为面向"),e("code",[v._v("Java")]),v._v("方法的"),e("code",[v._v("Java")]),v._v("方法栈，面向本地方法（用"),e("code",[v._v("C++")]),v._v("写的"),e("code",[v._v("native")]),v._v("方法）的本地方法栈，以及存放各个线程执行位置的"),e("code",[v._v("PC")]),v._v("寄存器。")]),v._v(" "),e("p",[e("img",{attrs:{src:a(449),alt:"Java 虚拟机"}})]),v._v(" "),e("p",[v._v("在运行过程中，每当调用进入一个"),e("code",[v._v("Java")]),v._v("方法，"),e("code",[v._v("Java")]),v._v("虚拟机会在当前线程的"),e("code",[v._v("Java")]),v._v("方法栈中生成一个栈帧，用以存放局部变量以及字节码的操作数。当退出当前执行的方法时，不管是正常返回还是异常返回，"),e("code",[v._v("Java")]),v._v("虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。")]),v._v(" "),e("p",[v._v("从硬件视角来看，"),e("code",[v._v("Java")]),v._v("字节码无法直接执行。"),e("code",[v._v("Java")]),v._v("虚拟机需要将字节码翻译成机器码。")]),v._v(" "),e("p",[v._v("在"),e("code",[v._v("HotSpot")]),v._v("里面，上述翻译过程有两种形式：第一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时编译"),e("code",[v._v("Just-In-Time compilation JIT")]),v._v("，即将一个方法中包含的所有字节码编译成机器码后再执行。")]),v._v(" "),e("p",[e("img",{attrs:{src:a(450),alt:"执行"}})]),v._v(" "),e("p",[v._v("前者的优势在于无需等待编译，而后者的优势在于实际运行速度更快。"),e("code",[v._v("HotSpot")]),v._v("默认采用混合模式，综合了解释执行和即时编译两者的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。")]),v._v(" "),e("h2",{attrs:{id:"java-虚拟机的运行效率究竟是怎么样的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机的运行效率究竟是怎么样的"}},[v._v("#")]),v._v(" Java 虚拟机的运行效率究竟是怎么样的？")]),v._v(" "),e("p",[v._v("即时编译建立在程序符合二八定律的假设上，"),e("code",[v._v("20%")]),v._v("的代码占据了"),e("code",[v._v("80%")]),v._v("的计算资源。")]),v._v(" "),e("p",[v._v("对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。")]),v._v(" "),e("p",[v._v("理论上讲，即时编译后的"),e("code",[v._v("Java")]),v._v("程序的执行效率，是可能超过"),e("code",[v._v("C++")]),v._v("程序的。这是因为与静态编译相比，即时编译拥有程序的运行时信息，并且能够根据这个信息做出相应的优化。")]),v._v(" "),e("p",[e("code",[v._v("HotSpot")]),v._v("内置了多个即时编译器："),e("code",[v._v("C1")]),v._v("、"),e("code",[v._v("C2")]),v._v("和"),e("code",[v._v("Graal")]),v._v("。"),e("code",[v._v("Graal")]),v._v("是"),e("code",[v._v("Java 10")]),v._v("正式引入的实验性即时编译器。")]),v._v(" "),e("p",[e("code",[v._v("C1")]),v._v("又叫做"),e("code",[v._v("Client")]),v._v("编译器，面向的是对启动性能有要求的客户端"),e("code",[v._v("GUI")]),v._v("程序，采用的优化手段相对简单，因此编译时间较短。")]),v._v(" "),e("p",[e("code",[v._v("C2")]),v._v("又叫做"),e("code",[v._v("Server")]),v._v("编译器，面向的是对峰值性能有要求的服务器端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。")]),v._v(" "),e("p",[v._v("从"),e("code",[v._v("Java 7")]),v._v("开始，"),e("code",[v._v("HotSpot")]),v._v("默认采用分层编译的方式：热点方法首先会被"),e("code",[v._v("C1")]),v._v("编译，而后热点方法中的热点会进一步被"),e("code",[v._v("C2")]),v._v("编译。"),e("code",[v._v("HotSpot")]),v._v("的即时编译是放在额外的编译线程中进行的。")]),v._v(" "),e("p",[v._v("在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。")])])}),[],!1,null,null,null);_.default=o.exports}}]);