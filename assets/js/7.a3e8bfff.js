(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{438:function(s,a,t){s.exports=t.p+"assets/img/00.9df3399c.jpg"},439:function(s,a,t){s.exports=t.p+"assets/img/01.540c482f.jpg"},440:function(s,a,t){s.exports=t.p+"assets/img/02.53181f61.jpg"},441:function(s,a,t){s.exports=t.p+"assets/img/03.e44da65b.jpg"},483:function(s,a,t){"use strict";t.r(a);var r=t(62),e=Object(r.a)({},(function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"走近-java-编译器-一"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#走近-java-编译器-一"}},[s._v("#")]),s._v(" 走近 Java 编译器(一)")]),s._v(" "),r("h2",{attrs:{id:"java-编译器概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-编译器概述"}},[s._v("#")]),s._v(" Java 编译器概述")]),s._v(" "),r("p",[r("code",[s._v("javac")]),s._v("命令可以将"),r("code",[s._v("Java")]),s._v("代码编译成字节码文件，但"),r("code",[s._v("javac")]),s._v("并不是"),r("code",[s._v("Java")]),s._v("编译器。")]),s._v(" "),r("p",[r("code",[s._v("javac")]),s._v("只是启动了一个"),r("code",[s._v("Java")]),s._v("虚拟机，执行了一个"),r("code",[s._v("Java")]),s._v("程序，跟我们平常用"),r("code",[s._v("java")]),s._v("命令运行一个程序是一样的。换句话说，"),r("code",[s._v("Java")]),s._v("编译器本身也是用"),r("code",[s._v("Java")]),s._v("写的。")]),s._v(" "),r("p",[s._v("一门语言的编译器，竟然可以用自己来实现。这种现象，叫做"),r("strong",[s._v("自举")]),r("code",[s._v("Bootstrapping")]),s._v("。实际上，一门语言的编译器，一开始肯定是要用其他语言来实现的。但等它成熟了以后，就会尝试实现自举。")]),s._v(" "),r("p",[s._v("既然"),r("code",[s._v("Java")]),s._v("编译器是用"),r("code",[s._v("Java")]),s._v("实现的，那意味着你自己也可以写一个程序，来调用"),r("code",[s._v("Java")]),s._v("的编译器。")]),s._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token import"}},[r("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JavaCompiler")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token import"}},[r("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("javax"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tools"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ToolProvider")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CoreApplication")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JavaCompiler")]),s._v(" compiler "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ToolProvider")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSystemJavaCompiler")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" compiler"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CoreTest.java"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[s._v('"result is "')]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" result"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br")])]),r("p",[r("code",[s._v("java.compiler")]),s._v("模块是"),r("code",[s._v("Java")]),s._v("编译器的"),r("code",[s._v("API")]),s._v("，"),r("code",[s._v("jdk.compiler")]),s._v("模块是"),r("code",[s._v("Java")]),s._v("编译器的具体实现。")]),s._v(" "),r("h2",{attrs:{id:"词法分析器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#词法分析器"}},[s._v("#")]),s._v(" 词法分析器")]),s._v(" "),r("p",[r("code",[s._v("Java")]),s._v("的词法分析器的具体实现在"),r("code",[s._v("JavaTokenizer")]),s._v("中，其"),r("code",[s._v("readToken")]),s._v("方法实现了主干的词法分析逻辑，能够从字符流中识别出"),r("code",[s._v("Token")]),s._v("。")]),s._v(" "),r("p",[r("code",[s._v("readToken")]),s._v("逻辑如下：")]),s._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[s._v("循环读取字符"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" 空白字符"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        处理 继续循环\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" 行结束符"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        处理 继续循环\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Za")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z$_"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        调用scanIden识别标识符和关键字 并结束循环\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("开头的"),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("进制 或"),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("进制"),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" 以及小数点"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        调用scanNumber识别数字 并结束循环\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" 等符号"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        返回代表这些符号的 "),r("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Token")]),s._v(" 并结束循环\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" isSpecial 识别特殊字符"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        调用scanOperator识别操作符\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br"),r("span",{staticClass:"line-number"},[s._v("12")]),r("br"),r("span",{staticClass:"line-number"},[s._v("13")]),r("br")])]),r("p",[r("img",{attrs:{src:t(438),alt:"词法分析器的有限自动机"}})]),s._v(" "),r("p",[s._v("针对关键字与标识符冲突的问题："),r("code",[s._v("Java")]),s._v("首先把所有的关键字和标识符都作为标识符识别出来，然后再从里面把所有预定义的关键字挑出来。这比构造一个复杂的有限自动机实现起来更简单！")]),s._v(" "),r("h2",{attrs:{id:"语法分析器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法分析器"}},[s._v("#")]),s._v(" 语法分析器")]),s._v(" "),r("p",[s._v("跟所有的语法分析器一样，"),r("code",[s._v("Java")]),s._v("的语法分析器会把词法分析器生成的"),r("code",[s._v("Token")]),s._v("流，生成一棵"),r("code",[s._v("AST")]),s._v("。")]),s._v(" "),r("p",[r("img",{attrs:{src:t(439),alt:"AST"}})]),s._v(" "),r("p",[s._v("语法分析的算法分为自顶向下和自底向上两种：")]),s._v(" "),r("ul",[r("li",[s._v("以"),r("code",[s._v("LL")]),s._v("算法为代表的自顶向下的算法，比较直观、容易理解，但需要解决左递归问题；")]),s._v(" "),r("li",[s._v("以"),r("code",[s._v("LR")]),s._v("算法为代表的自底向上算法，能够避免左递归问题，但不那么直观，不太容易理解。")])]),s._v(" "),r("p",[r("strong",[r("code",[s._v("Java")]),s._v("编译器用的是什么算法呢？")])]),s._v(" "),r("p",[r("code",[s._v("JavacParser")]),s._v("中的"),r("code",[s._v("parseExpression")]),s._v("方法主要逻辑如下：")]),s._v(" "),r("p",[r("img",{attrs:{src:t(440),alt:"parseExpression"}})]),s._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[s._v("term -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" term1 termRest\ntermRest -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" AssignOperator term1\nAssignOperator -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" *"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" /"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ^"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" %"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v("\nterm1 -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" term2 term1Rest\nterm1Rest -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ? term "),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" term1\nterm2 -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" term3 term2Rest\nterm2Rest -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" InfixOperator term3\nInfixOperator -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ^ "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" - "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" * "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" / "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" %\nterm3 -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" PrefixOperator term3 "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" Expr "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" TypeNoParams "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" term3 "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Primary "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Selector"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("PostfixOperator"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nPrefixOperator -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ++ "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" -- "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ~ "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" + "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" -\nPostfixOperator -"),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ++ "),r("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" --\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br")])]),r("p",[r("code",[s._v("Java")]),s._v("的语法分析总体上是自顶向下的递归下降算法。在解决左递归问题时，也采用了标准的改写文法的方法。")]),s._v(" "),r("p",[r("img",{attrs:{src:t(441),alt:"LR"}})]),s._v(" "),r("p",[s._v("在处理二元表达式时，局部采用了自底向上的运算符优先级解析器，使得算法更简洁。")]),s._v(" "),r("p",[s._v("在一步一步解析的过程中，当"),r("code",[s._v("opStack")]),s._v("的栈顶运算符的优先级大于等于后续运算符的优先级时，就会基于"),r("code",[s._v("odStack")]),s._v("栈顶的两个元素创建一棵二元表达式的子树，参考第"),r("code",[s._v("2")]),s._v("步。")]),s._v(" "),r("p",[s._v("反过来的话，栈顶运算符的优先级小于后续运算符的优先级，参考第"),r("code",[s._v("4")]),s._v("步，就会继续把操作数和操作符入栈，而不是创建二元表达式。")]),s._v(" "),r("p",[s._v("这就可以保证，优先级高的操作符形成的子树，总会在最后的"),r("code",[s._v("AST")]),s._v("的下层，从而优先级更高。")])])}),[],!1,null,null,null);a.default=e.exports}}]);